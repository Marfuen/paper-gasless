import { Mumbai } from "@thirdweb-dev/chains";
import {
  ConnectWallet,
  useAddress,
  useContract,
  useLogin,
  useNetworkMismatch,
  useSwitchChain,
  useUser,
} from "@thirdweb-dev/react";
import Head from "next/head";
import { useCallback, useEffect, useMemo, useState } from "react";

export default function Home() {
  const { user } = useUser();
  const { login } = useLogin();
  const address = useAddress();
  const isNetworkMismatch = useNetworkMismatch();
  const switchChain = useSwitchChain();
  const [isClaiming, setIsClaiming] = useState(false);

  const { contract } = useContract(
    "0x7729D2113071fd612163F3cD41889534C9aeF296"
  );

  const claim = useCallback(async () => {
    if (!user) return;
    try {
      if (isNetworkMismatch) {
        try {
          await switchChain(Mumbai.chainId);
          return;
        } catch (e) {
          console.log(e);
          return;
        }
      } else {
        setIsClaiming(true);
        const claimedTx = await contract?.erc1155.claimTo(user.address, 0, 1);
        console.log(claimedTx);
      }
    } catch (e) {
      console.log(e);
    } finally {
      setIsClaiming(false);
    }
  }, [contract?.erc1155, isNetworkMismatch, switchChain, user]);

  const userAddress = useMemo(() => {
    return user?.address;
  }, [user?.address]);

  const handleLogin = useCallback(async () => {
    try {
      await login({
        chainId: Mumbai.chainId.toString(),
        domain: process.env.NEXT_PUBLIC_THIRDWEB_AUTH_DOMAIN,
      });
    } catch (e) {
      console.log(e);
    }
  }, [login]);

  useEffect(() => {
    const authorize = async () => {
      await handleLogin();
    };
    if (address && !userAddress) {
      authorize();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [userAddress, address]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <ConnectWallet />
        <p>Authenticated with: {user?.address}</p>
        <button
          style={{
            paddingLeft: "4rem",
            paddingRight: "4rem",
            paddingTop: "1rem",
            paddingBottom: "1rem",
            cursor: "pointer",
          }}
          onClick={claim}
        >
          {isClaiming ? "Claiming..." : "Claim"}
        </button>
      </main>
    </>
  );
}
